{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","console","log","document","getElementById","select","setSelectionRange","navigator","clipboard","writeText","split","join","filter","element","About","myStyle","border","borderColor","defaultProps","Alert","height","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","setInterval","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bda6f3ab.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\n            <div className=\"container-fluid\">\n                <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\n                        </li>\n                    </ul>\n                    {/* <form className=\"d-flex\">\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n                        <button cla\n                        ssName=\"btn btn-primary\" type=\"submit\">Search</button>\n                    </form> */}\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\n                    </div>\n                </div>\n            </div>\n        </nav>\n    )\n}\n\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    aboutText: PropTypes.string.isRequired\n}\n\nNavbar.defaultProps = {\n    title: 'Set title here',\n    aboutText: 'About'\n  };","import React, { useState } from \"react\";\n\nexport default function TextForm(props) {\n  const handleUpClick = () => {\n    // console.log(\"Uppercase was clicked: \" +  text);\n    let newText = text.toUpperCase();\n    setText(newText);\n    props.showAlert(\"Converted to uppercase!\", \"success\");\n  };\n\n  const handleLoClick = () => {\n    let newText = text.toLowerCase();\n    setText(newText);\n    props.showAlert(\"Converted to lowercase!\", \"success\");\n  };\n\n  const handleClearClick = () => {\n    let newText = \"\";\n    setText(newText);\n    props.showAlert(\"Text Cleared!\", \"success\");\n  };\n\n  const handleOnChange = (event) => {\n    // console.log(\"On change\");\n    setText(event.target.value);\n  };\n\n  // Credits: A\n  const handleCopy = () => {\n    console.log(\"I am copy\");\n    var text = document.getElementById(\"myBox\");\n    text.select();\n    text.setSelectionRange(0, 9999);\n    navigator.clipboard.writeText(text.value);\n    props.showAlert(\"Copied to Clipboard!\", \"success\");\n  };\n\n  // Credits: Coding Wala\n  const handleExtraSpaces = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(\" \"));\n    props.showAlert(\"Extra spaces removed!\", \"success\");\n  };\n\n  const [text, setText] = useState(\"\");\n  // text = \"new text\"; // Wrong way to change the state\n  // setText(\"new text\"); // Correct way to change the state\n  return (\n    <>\n      <div\n        className=\"container\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        <h1>{props.heading}</h1>\n        <div className=\"mb-3\">\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={handleOnChange}\n            style={{\n              backgroundColor: props.mode === \"dark\" ? \"$\" : \"white\",\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\n            }}\n            id=\"myBox\"\n            rows=\"8\"\n          ></textarea>\n        </div>\n        <button\n          className=\"btn btn-primary mx-1 my-1\"\n          disabled={text.length === 0}\n          onClick={handleUpClick}\n        >\n          Convert to Uppercase\n        </button>\n        <button\n          className=\"btn btn-primary mx-1 my-1\"\n          disabled={text.length === 0}\n          onClick={handleLoClick}\n        >\n          Convert to Lowercase\n        </button>\n        <button\n          className=\"btn btn-primary mx-1 my-1\"\n          disabled={text.length === 0}\n          onClick={handleClearClick}\n        >\n          Clear Text\n        </button>\n        <button\n          className=\"btn btn-primary mx-1 my-1\"\n          disabled={text.length === 0}\n          onClick={handleCopy}\n        >\n          Copy Text\n        </button>\n        <button\n          className=\"btn btn-primary mx-1 my-1\"\n          disabled={text.length === 0}\n          onClick={handleExtraSpaces}\n        >\n          Remove Extra Spaces\n        </button>\n      </div>\n      <div\n        className=\"container my-3\"\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\n      >\n        <h2>Your text summary</h2>\n        <p>\n          {\n            text.split(\" \").filter((element) => {\n              return element.length !== 0;\n            }).length\n          }{\" \"}\n          words and {text.length} characters\n        </p>\n        <p>\n          {0.008 *\n            text.split(\" \").filter((element) => {\n              return element.length !== 0;\n            }).length}{\" \"}\n          Minutes read\n        </p>\n        <h2>Preview</h2>\n        <p>\n          {text.length > 0\n            ? text\n            : \"Enter something in the textbox above to preview it here\"}\n        </p>\n      </div>\n    </>\n  );\n}\n","// import React, { useState } from \"react\";\n\nexport default function About(props) {\n  // const [myStyle, setMyStyle] = useState({\n  //     color: 'black',\n  //     backgroundColor: 'white'\n  // })\n  let myStyle = {\n    color: props.mode === \"dark\" ? \"white\" : \"#042743\",\n    backgroundColor: props.mode === \"dark\" ?'rgb(36 74 104)' : \"white\",\n    border: \"1px solid\",\n    borderColor: props.mode === \"dark\" ? \"white\" : \"#042743\",\n  };\n\n  return (\n    <div className=\"container\" style={myStyle}>\n      <h1 className=\"my-3\">About Us</h1>\n      <div className=\"accordion\" id=\"accordionExample\">\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className=\"accordion-button\"\n              type=\"button\"\n              style={myStyle}\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n            >\n              Analyze Your Text\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className=\"accordion-collapse collapse show\"\n            aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              TextUtils gives you a way to analyze your text quickly and\n              efficiently. Be it word count , Character count and many more\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\" style={myStyle}>\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className=\"accordion-button collapsed\"\n              style={myStyle}\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n            >\n              Free To Use\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              Textutils is a free character countor tool that provides instant\n              character count & word count statistics for a given text .\n              Textutils reports the number of words and characters . Thus it is\n              suitable for text with word/ character limit\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className=\"accordion-button collapsed\"\n              style={myStyle}\n              type=\"button\"\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n            >\n              Browser Compatible\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              this word counter software works in any browser such as chrome\n              ,firefox ,Internet Explorer ,Safari, Opera etc. it suits to count\n              characters in facebook ,blog, books, excel document, pdf document\n              ,essays, etc.\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react'\n\nfunction Alert(props) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n    return (\n        <div style={{height : \"50px\"}}>\n            {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg} \n        </div>}\n        </div>\n    )\n}\n\nexport default Alert\n","import \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); // Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n      setInterval(() => {\n        document.title = \"TextUtils is Amazing Mode\";\n      }, 2000);\n      setInterval(() => {\n        document.title = \"Install TextUtils Now\";\n      }, 1500);\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  return (\n    <>\n      <Router>\n        <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            <Route exact path=\"/about\">\n              <About mode={mode}/>\n            </Route>\n            <Route exact path=\"/\">\n              <TextForm\n                showAlert={showAlert}\n                heading=\"Enter the text to analyze below\"\n                mode={mode}\n              />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}